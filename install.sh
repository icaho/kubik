#!/bin/bash

# Specifiy component versions and Git root path
MINIKUBE_VERSION=v0.28.2
KUBECTL_VERSION=v1.11.3
VBOX_VERSION=5.1

GIT_ROOT=~/kubikal



#
# Detect OS, only support OS X at the moment
#

case "$OSTYPE" in
	darwin*)	echo "This installer will setup kubik, kubectl and minikube on your OS X system"
			MINIKUBE_URL="https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-darwin-amd64"
			KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/darwin/amd64/kubectl"
			;;

	linux*)		echo "This installer will setup kubik, kubectl and minikube on your Linux system"
			MINIKUBE_URL="https://storage.googleapis.com/minikube/releases/$MINIKUBE_VERSION/minikube-linux-amd64"
			KUBECTL_URL="https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl"
			;;

	*)		echo "Sorry, your operating system is not supported by minikube."
			exit 1;
esac

echo ""



#
# Ensure VirtualBox is installed
#

if VBOX_VERSION_INSTALLED=`VBoxManage --version`; then
        echo "--- Found VirtualBox version $VBOX_VERSION_INSTALLED"
fi

echo $VBOX_VERSION_INSTALLED | if ! grep -q "^$VBOX_VERSION" ; then
	echo ""
	echo "VirtualBox version 5.1.2 or higher is required:"
	echo "	https://www.virtualbox.org/wiki/Downloads"
	echo ""
	exit 1
fi



#
# Ensure the correct version of kubectl is installed
#

if which kubectl 2>/dev/null >/dev/null ; then
	KUBECTL_VERSION_INSTALLED=`kubectl version --client | cut -f6 -d'"'`
	echo "--- Found kubectl version $KUBECTL_VERSION_INSTALLED at `which kubectl`"
fi

if [ "$KUBECTL_VERSION" != "$KUBECTL_VERSION_INSTALLED" ] ; then
	echo -n "--- Downloading kubectl $KUBECTL_VERSION..."
	curl -Lso /tmp/kubectl.$$ $KUBECTL_URL
	chmod +x /tmp/kubectl.$$
	echo ""

	echo "--- Installing kubectl $KUBECTL_VERSION to /usr/local/bin..."
	sudo mv /tmp/kubectl.$$ /usr/local/bin/kubectl
fi

KUBECTL_VERSION_INSTALLED=`kubectl version --client | cut -f6 -d'"'`
if [ "$KUBECTL_VERSION" != "$KUBECTL_VERSION_INSTALLED" ] ; then
	echo "Failed to install kubectl version $KUBECTL_VERSION, aborting."
	exit 1
fi



#
# Ensure the correct version of minikube is installed
#

if which minikube 2>/dev/null >/dev/null ; then
	MINIKUBE_VERSION_INSTALLED=`minikube version | tail -1 | cut -f3 -d' '`
	echo "--- Found minikube version $MINIKUBE_VERSION_INSTALLED at `which minikube`"
fi

if [ "$MINIKUBE_VERSION" != "$MINIKUBE_VERSION_INSTALLED" ] ; then
	echo -n "--- Downloading minikube $MINIKUBE_VERSION..."
	curl -Lso /tmp/minikube.$$ $MINIKUBE_URL
	chmod +x /tmp/minikube.$$
	echo ""

	echo "--- Installing minikube $MINIKUBE_VERSION to /usr/local/bin..."
	sudo mv /tmp/minikube.$$ /usr/local/bin/minikube
fi

MINIKUBE_VERSION_INSTALLED=`minikube version | tail -1 | cut -f3 -d' '`
if [ "$MINIKUBE_VERSION" != "$MINIKUBE_VERSION_INSTALLED" ] ; then
	echo "Failed to install minikube version $MINIKUBE_VERSION, aborting."
	echo $MINIKUBE_VERSION_INSTALLED
	minikube version | cut -f3 -d' '
	exit 1
fi



#
# Clone kubik-config repo
#

if ! [ -d $GIT_ROOT/kubik-config ] ; then
	echo "--- Cloning kubik-config repo to $GIT_ROOT..."
	git clone -q git@github.com:icaho/kubik-config.git $GIT_ROOT/kubik-config
else
	echo "--- Updating $GIT_ROOT/kubik-config"
	pushd $GIT_ROOT/kubik-config 2>/dev/null >/dev/null
	git pull
	popd 2>/dev/null >/dev/null
fi



#
# Clone kubik repo
#

if ! [ -d $GIT_ROOT/kubik ] ; then
	echo "--- Cloning kubik repo to $GIT_ROOT..."
	git clone -q git@github.com:icaho/kubik.git $GIT_ROOT/kubik
else
	echo "--- Updating $GIT_ROOT/kubik"
	pushd $GIT_ROOT/kubik 2>/dev/null >/dev/null
	git pull
	popd 2>/dev/null >/dev/null
fi



#
# Install /etc/kubik/kubik.conf
#

echo "--- Configuring kubik to use $GIT_ROOT/kubik-config..."
cat <<EOF >/tmp/kubik.conf.$$
# kubik config generated by installer on `date`
ENVIRONMENTS=$GIT_ROOT/kubik-config/environments
APPLICATIONS=$GIT_ROOT/kubik-config/applications
EOF
sudo mkdir -p /etc/kubik
sudo mv /tmp/kubik.conf.$$ /etc/kubik/kubik.conf



#
# Install kubik to /usr/local/bin
#

echo "--- Symlinking kubik to /usr/local/bin..."
sudo rm -rf /usr/local/bin/kubik
sudo ln -s $GIT_ROOT/kubik/kubik /usr/local/bin/kubik

if ! which kubik 2>/dev/null >/dev/null ; then
	echo "Failed to install kubik to /usr/local/bin, aborting."
	echo "You can still run it from $GIT_ROOT/kubik"
fi



#
# Initialise local Kubernetes cluster if needed
#

if [ "`minikube status`" != "Running" ] ; then
	echo -n "--- "
	if ! minikube start --cpus=2 --memory=2048 --disk-size=20g ; then
		echo "Failed to initialise cluster, aborting."
		exit 1
	fi
	# Give the cluster a few seconds to become ready
	sleep 5

	echo "--- Found a local Kubernetes cluster"
fi



#
# Ensure an Ingress controller exists
#

echo "--- Setting up a Kubernetes Ingress controller..."
kubectl apply -f $GIT_ROOT/kubik-config/environments/kube-system/kubernetes-ingress-controller.yaml



#
# The end
#

echo "Your system should now have kubik installed and configured."
echo ""
echo "To spin up a local environment simply run 'kubik create'"
echo "If you have any questions or feedback please contact MSM DevOps."
echo ""
